# 1Ô∏è‚É£ Use Rust official image for building
FROM rust:latest AS builder

# 2Ô∏è‚É£ Install dependencies for musl-based builds
RUN apt update && apt install -y \
    musl-tools \
    musl-dev \
    build-essential \
    pkg-config \
    libssl-dev \
    cmake \
    clang

# 3Ô∏è‚É£ Set working directory
WORKDIR /app

# 4Ô∏è‚É£ Copy Cargo files separately to optimize Docker caching
COPY Cargo.toml Cargo.lock ./

# 5Ô∏è‚É£ Fetch dependencies before copying the entire source code
RUN cargo fetch

# 6Ô∏è‚É£ Copy the project source code
COPY . .

# 7Ô∏è‚É£ Set the target for musl
RUN rustup target add x86_64-unknown-linux-musl

# 8Ô∏è‚É£ Explicitly set environment variables for OpenSSL
ENV OPENSSL_DIR=/usr \
    OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu \
    OPENSSL_INCLUDE_DIR=/usr/include \
    PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig

# 9Ô∏è‚É£ Build the Rust application with musl
RUN cargo build --release --target=x86_64-unknown-linux-musl

# üîü Use a lightweight production image
FROM alpine:latest

# 1Ô∏è‚É£1Ô∏è‚É£ Install required runtime dependencies
RUN apk --no-cache add ca-certificates

# 1Ô∏è‚É£2Ô∏è‚É£ Set working directory
WORKDIR /usr/local/bin

# 1Ô∏è‚É£3Ô∏è‚É£ Copy the compiled binary from the builder stage
COPY --from=builder /app/target/x86_64-unknown-linux-musl/release/thereplacebook /usr/local/bin/thereplacebook

# 1Ô∏è‚É£4Ô∏è‚É£ Ensure execution permissions
RUN chmod +x /usr/local/bin/thereplacebook

# 1Ô∏è‚É£5Ô∏è‚É£ Expose the application's port
EXPOSE 3000

# 1Ô∏è‚É£6Ô∏è‚É£ Define the startup command
CMD ["./thereplacebook"]